!function(){"use strict";var e=1e-6,n="undefined"!=typeof Float32Array?Float32Array:Array,t=Math.PI/180;function r(){var e=new n(16);return n!=Float32Array&&(e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0),e[0]=1,e[5]=1,e[10]=1,e[15]=1,e}Math.hypot||(Math.hypot=function(){for(var e=0,n=arguments.length;n--;)e+=arguments[n]*arguments[n];return Math.sqrt(e)});var o=function(e,n,t,r,o){var i,a=1/Math.tan(n/2);return e[0]=a/t,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=a,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=-1,e[12]=0,e[13]=0,e[15]=0,null!=o&&o!==1/0?(i=1/(r-o),e[10]=(o+r)*i,e[14]=2*o*r*i):(e[10]=-1,e[14]=-2*r),e};function i(){var e=new n(3);return n!=Float32Array&&(e[0]=0,e[1]=0,e[2]=0),e}function a(e,t,r){var o=new n(3);return o[0]=e,o[1]=t,o[2]=r,o}function s(e,n,t,r){return e[0]=n,e[1]=t,e[2]=r,e}i();var c="fn permute4(x: vec4<f32>) -> vec4<f32> { return ((x * 34. + 1.) * x) % vec4<f32>(289.); }\nfn taylorInvSqrt4(r: vec4<f32>) -> vec4<f32> { return 1.79284291400159 - 0.85373472095314 * r; }\n\nfn noise3(p: vec3<f32>) -> f32 {\n  let a = floor(p);\n  var d: vec3<f32> = p - a;\n  d = d * d * (3. - 2. * d);\n\n  let b = a.xxyy + vec4<f32>(0., 1., 0., 1.);\n  let k1 = permute4(b.xyxy);\n  let k2 = permute4(k1.xyxy + b.zzww);\n\n  let c = k2 + a.zzzz;\n  let k3 = permute4(c);\n  let k4 = permute4(c + 1.);\n\n  let o1 = fract(k3 * (1. / 41.));\n  let o2 = fract(k4 * (1. / 41.));\n\n  let o3 = o2 * d.z + o1 * (1. - d.z);\n  let o4 = o3.yw * d.x + o3.xz * (1. - d.x);\n\n  return o4.y * d.y + o4.x * (1. - d.y);\n}\n\nfn simplexNoise3(v: vec3<f32>) -> f32 {\n  let C = vec2<f32>(1. / 6., 1. / 3.);\n  let D = vec4<f32>(0., 0.5, 1., 2.);\n\n  var i: vec3<f32>  = floor(v + dot(v, C.yyy));\n  let x0 = v - i + dot(i, C.xxx);\n\n  let g = step(x0.yzx, x0.xyz);\n  let l = 1.0 - g;\n  let i1 = min(g.xyz, l.zxy);\n  let i2 = max(g.xyz, l.zxy);\n\n  let x1 = x0 - i1 + 1. * C.xxx;\n  let x2 = x0 - i2 + 2. * C.xxx;\n  let x3 = x0 - 1. + 3. * C.xxx;\n\n  i = i % vec3<f32>(289.);\n  let p = permute4(permute4(permute4(\n      i.z + vec4<f32>(0., i1.z, i2.z, 1. )) +\n      i.y + vec4<f32>(0., i1.y, i2.y, 1. )) +\n      i.x + vec4<f32>(0., i1.x, i2.x, 1. ));\n\n  var n_: f32 = 1. / 7.;\n  let ns = n_ * D.wyz - D.xzx;\n\n  let j = p - 49. * floor(p * ns.z * ns.z);\n\n  let x_ = floor(j * ns.z);\n  let y_ = floor(j - 7.0 * x_);\n\n  let x = x_ *ns.x + ns.yyyy;\n  let y = y_ *ns.x + ns.yyyy;\n  let h = 1.0 - abs(x) - abs(y);\n\n  let b0 = vec4<f32>( x.xy, y.xy );\n  let b1 = vec4<f32>( x.zw, y.zw );\n\n  let s0 = floor(b0)*2.0 + 1.0;\n  let s1 = floor(b1)*2.0 + 1.0;\n  let sh = -step(h, vec4<f32>(0.));\n\n  let a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  let a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  var p0: vec3<f32> = vec3<f32>(a0.xy, h.x);\n  var p1: vec3<f32> = vec3<f32>(a0.zw, h.y);\n  var p2: vec3<f32> = vec3<f32>(a1.xy, h.z);\n  var p3: vec3<f32> = vec3<f32>(a1.zw, h.w);\n\n  let norm = taylorInvSqrt4(vec4<f32>(dot(p0,p0), dot(p1,p1), dot(p2,p2), dot(p3,p3)));\n  p0 = p0 * norm.x;\n  p1 = p1 * norm.y;\n  p2 = p2 * norm.z;\n  p3 = p3 * norm.w;\n\n  var m: vec4<f32> = 0.6 - vec4<f32>(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3));\n  m = max(m, vec4<f32>(0.));\n  m = m * m;\n  return 42. * dot(m * m, vec4<f32>(dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3)));\n}\n";const u=({count:e,width:n,height:t,generator:r})=>`\n@group(0) @binding(0) var texture : texture_storage_2d_array<rgba8unorm, write>;\n\n${c}\n\nstruct Atlas {\n  count : i32,\n  width : i32,\n  height : i32,\n  stride : i32,\n  length : i32,\n}\n\nconst atlas : Atlas = Atlas(\n  ${e},\n  ${n},\n  ${t},\n  ${n*t},\n  ${e*n*t},\n);\n\nfn hue2Rgb(p : f32, q : f32, t : f32) -> f32 {\n  var h : f32 = t;\n  if (h < 0) { h += 1; }\n  if (h > 1) { h -= 1; }\n  if (h < 1 / 6.0) { return p + (q - p) * 6 * h; }\n  if (h < 1 / 2.0) { return q; }\n  if (h < 2 / 3.0) { return p + (q - p) * (2.0 / 3.0 - h) * 6; }\n  return p;\n}\n\nfn hsl2Rgba(h : f32, s: f32, l: f32) -> vec4<f32> {\n  var rgba : vec4<f32> = vec4<f32>(0, 0, 0, 1);\n  if (s == 0) {\n    rgba.r = l;\n    rgba.g = l;\n    rgba.b = l;\n  } else {\n    var q : f32;\n    if (l < 0.5) {\n      q = l * (1 + s);\n    } else {\n      q = l + s - l * s;\n    }\n    var p : f32 = 2 * l - q;\n    rgba.r = hue2Rgb(p, q, h + 1 / 3.0);\n    rgba.g = hue2Rgb(p, q, h);\n    rgba.b = hue2Rgb(p, q, h - 1 / 3.0);\n  }\n  return rgba;\n};\n\n${r}\n\n@compute @workgroup_size(64)\nfn main(@builtin(global_invocation_id) GlobalInvocationID : vec3<u32>) {\n  var id : i32 = i32(GlobalInvocationID.x);\n  if (id >= atlas.length) {\n    return;\n  }\n  var tex : i32 = id / atlas.stride;\n  var index : i32 = id - tex * atlas.stride;\n  var y : i32 = index / atlas.width;\n  var pixel : vec2<i32> = vec2<i32>(index - y * atlas.width, y);\n  textureStore(texture, pixel, tex, getColorAt(tex, pixel));\n}\n`;class f{constructor({device:e,count:n=254,width:t=16,height:r=16}){this.device=e,this.count=n,this.width=t,this.height=r,this.texture=e.createTexture({dimension:"2d",size:[t,r,n],format:"rgba8unorm",usage:GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.TEXTURE_BINDING})}compute(e="\nfn getColorAt(texture : i32, pixel : vec2<i32>) -> vec4<f32> {\n  var h : f32 = f32(texture) / f32(atlas.count);\n  var s : f32 = 0.5;\n  var l : f32 = 0.5;\n  if (pixel.x == 0 || pixel.y == 0 || pixel.x == (atlas.width - 1) || pixel.y == (atlas.height - 1)) {\n    l = min(l * 1.1, 1);\n  }\n  return hsl2Rgba(h, s, l);\n}\n"){if(this.generator===e)return;this.generator=e;const{device:n,count:t,width:r,height:o,texture:i}=this,a=n.createComputePipeline({layout:"auto",compute:{module:n.createShaderModule({code:u({count:t,width:r,height:o,generator:e})}),entryPoint:"main"}}),s=n.createCommandEncoder(),c=s.beginComputePass();c.setPipeline(a),c.setBindGroup(0,n.createBindGroup({layout:a.getBindGroupLayout(0),entries:[{binding:0,resource:i.createView()}]})),c.dispatchWorkgroups(Math.ceil(t*r*o/64)),c.end(),n.queue.submit([s.finish()])}}const l=a(0,1,0),p=r();class d{constructor({device:e,aspect:n=1,fov:t=75,near:o=.1,far:a=1e3}){this.device=e,this.buffer=e.createBuffer({size:41*Float32Array.BYTES_PER_ELEMENT+12,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM}),this.aspect=n,this.fov=t,this.near=o,this.far=a,this.position=i(),this.target=i(),this.projectionMatrix=r(),this.viewBuffer=new Float32Array(25),this.viewMatrix=this.viewBuffer.subarray(0,16),this.normalMatrix=this.viewBuffer.subarray(16,25)}updateProjection(){const{device:e,buffer:n,projectionMatrix:r,aspect:i,fov:a,near:s,far:c}=this;o(r,a*t,i,s,c),e.queue.writeBuffer(n,0,r)}updateView(){const{device:n,buffer:t,viewBuffer:r,viewMatrix:o,normalMatrix:i,position:a,target:s}=this;var c,u,f,d,v,h,x,g,m,y,b,z,w,S,E,T,k,B,P,A,_,C,M;c=o,f=s,d=l,E=(u=a)[0],T=u[1],k=u[2],B=d[0],P=d[1],A=d[2],_=f[0],C=f[1],M=f[2],Math.abs(E-_)<e&&Math.abs(T-C)<e&&Math.abs(k-M)<e?function(e){e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1}(c):(b=E-_,z=T-C,w=k-M,v=P*(w*=S=1/Math.hypot(b,z,w))-A*(z*=S),h=A*(b*=S)-B*w,x=B*z-P*b,(S=Math.hypot(v,h,x))?(v*=S=1/S,h*=S,x*=S):(v=0,h=0,x=0),g=z*x-w*h,m=w*v-b*x,y=b*h-z*v,(S=Math.hypot(g,m,y))?(g*=S=1/S,m*=S,y*=S):(g=0,m=0,y=0),c[0]=v,c[1]=g,c[2]=b,c[3]=0,c[4]=h,c[5]=m,c[6]=z,c[7]=0,c[8]=x,c[9]=y,c[10]=w,c[11]=0,c[12]=-(v*E+h*T+x*k),c[13]=-(g*E+m*T+y*k),c[14]=-(b*E+z*T+w*k),c[15]=1),function(e,n){var t=n[0],r=n[1],o=n[2],i=n[3],a=n[4],s=n[5],c=n[6],u=n[7],f=n[8],l=n[9],p=n[10],d=n[11],v=n[12],h=n[13],x=n[14],g=n[15],m=t*s-r*a,y=t*c-o*a,b=t*u-i*a,z=r*c-o*s,w=r*u-i*s,S=o*u-i*c,E=f*h-l*v,T=f*x-p*v,k=f*g-d*v,B=l*x-p*h,P=l*g-d*h,A=p*g-d*x,_=m*A-y*P+b*B+z*k-w*T+S*E;_&&(_=1/_,e[0]=(s*A-c*P+u*B)*_,e[1]=(c*k-a*A-u*T)*_,e[2]=(a*P-s*k+u*E)*_,e[3]=(o*P-r*A-i*B)*_,e[4]=(t*A-o*k+i*T)*_,e[5]=(r*k-t*P-i*E)*_,e[6]=(h*S-x*w+g*z)*_,e[7]=(x*b-v*S-g*y)*_,e[8]=(v*w-h*b+g*m)*_)}(i,function(e,n){var t=n[0],r=n[1],o=n[2],i=n[3],a=n[4],s=n[5],c=n[6],u=n[7],f=n[8],l=n[9],p=n[10],d=n[11],v=n[12],h=n[13],x=n[14],g=n[15],m=t*s-r*a,y=t*c-o*a,b=t*u-i*a,z=r*c-o*s,w=r*u-i*s,S=o*u-i*c,E=f*h-l*v,T=f*x-p*v,k=f*g-d*v,B=l*x-p*h,P=l*g-d*h,A=p*g-d*x,_=m*A-y*P+b*B+z*k-w*T+S*E;return _?(_=1/_,e[0]=(s*A-c*P+u*B)*_,e[1]=(o*P-r*A-i*B)*_,e[2]=(h*S-x*w+g*z)*_,e[3]=(p*w-l*S-d*z)*_,e[4]=(c*k-a*A-u*T)*_,e[5]=(t*A-o*k+i*T)*_,e[6]=(x*b-v*S-g*y)*_,e[7]=(f*S-p*b+d*y)*_,e[8]=(a*P-s*k+u*E)*_,e[9]=(r*k-t*P-i*E)*_,e[10]=(v*w-h*b+g*m)*_,e[11]=(l*b-f*w-d*m)*_,e[12]=(s*T-a*B-c*E)*_,e[13]=(t*B-r*T+o*E)*_,e[14]=(h*y-v*z-x*m)*_,e[15]=(f*z-l*y+p*m)*_,e):null}(p,o)),n.queue.writeBuffer(t,64,r)}}var v="const PI : f32 = 3.141592653589793;\n\nfn rotateX(rad : f32) -> mat3x3<f32> {\n  var c : f32 = cos(rad);\n  var s : f32 = sin(rad);\n  return mat3x3<f32>(\n    1, 0, 0,\n    0, c, s,\n    0, -s, c,\n  );\n}\n\nfn rotateY(rad : f32) -> mat3x3<f32> {\n  var c : f32 = cos(rad);\n  var s : f32 = sin(rad);\n  return mat3x3<f32>(\n    c, 0, -s,\n    0, 1, 0,\n    s, 0, c,\n  );\n}\n\nfn rotateZ(rad : f32) -> mat3x3<f32> {\n  var c : f32 = cos(rad);\n  var s : f32 = sin(rad);\n  return mat3x3<f32>(\n    c, s, 0,\n    -s, c, 0,\n    0, 0, 1,\n  );\n}\n";class h{constructor({device:e,format:n}){this.device=e,this.descriptor={colorAttachments:[{clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store"}]},this.effects=(e=>{const n=new Float32Array([0,0,0,.3,.5,.5]),t=e.createBuffer({size:32,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM,mappedAtCreation:!0});return new Float32Array(t.getMappedRange()).set(n),t.unmap(),{buffer:t,edges:{get color(){return n.subarray(0,3)},set color(r){n.set(r),e.queue.writeBuffer(t,0,n,0,3)},get intensity(){return n[3]},set intensity(r){n[3]=r,e.queue.writeBuffer(t,12,n,3,1)},get depthScale(){return n[4]},set depthScale(r){n[4]=r,e.queue.writeBuffer(t,16,n,4,1)},get normalScale(){return n[5]},set normalScale(r){n[5]=r,e.queue.writeBuffer(t,20,n,5,1)}}}})(e),this.geometry=(e=>{const n=e.createBuffer({size:18*Float32Array.BYTES_PER_ELEMENT,usage:GPUBufferUsage.VERTEX,mappedAtCreation:!0});return new Float32Array(n.getMappedRange()).set([-1,-1,1,1,-1,1,1,1,1,1,1,1,-1,1,1,-1,-1,1]),n.unmap(),n})(e),this.pipeline=e.createRenderPipeline({layout:"auto",vertex:{module:e.createShaderModule({code:"\n@vertex\nfn main(@location(0) position : vec4<f32>) -> @builtin(position) vec4<f32> {\n  return position;\n}\n"}),entryPoint:"main",buffers:[{arrayStride:3*Float32Array.BYTES_PER_ELEMENT,attributes:[{shaderLocation:0,offset:0,format:"float32x3"}]}]},fragment:{module:e.createShaderModule({code:"\nstruct Edges {\n  color : vec3<f32>,\n  intensity : f32,\n  depthScale : f32,\n  normalScale : f32,\n}\n\nstruct Effects {\n  edges : Edges,\n}\n\n@group(0) @binding(0) var<uniform> effects : Effects;\n@group(0) @binding(1) var colorTexture : texture_2d<f32>;\n@group(0) @binding(2) var normalTexture : texture_2d<f32>;\n@group(0) @binding(3) var positionTexture : texture_2d<f32>;\n\nconst offset : vec3<i32> = vec3<i32>(1, 1, 0);\n\nfn edgesDepth(pixel : vec2<i32>) -> f32 {\n  var pixelCenter : f32 = textureLoad(positionTexture, pixel, 0).z;\n  var pixelLeft : f32 = textureLoad(positionTexture, pixel - offset.xz, 0).z;\n  var pixelRight : f32 = textureLoad(positionTexture, pixel + offset.xz, 0).z;\n  var pixelUp : f32 = textureLoad(positionTexture, pixel + offset.zy, 0).z;\n  var pixelDown : f32 = textureLoad(positionTexture, pixel - offset.zy, 0).z;\n  return (\n    abs(pixelLeft    - pixelCenter) \n    + abs(pixelRight - pixelCenter) \n    + abs(pixelUp    - pixelCenter) \n    + abs(pixelDown  - pixelCenter) \n  ) * effects.edges.depthScale;\n}\n\nfn edgesNormal(pixel : vec2<i32>) -> f32 {\n  var pixelCenter : vec3<f32> = textureLoad(normalTexture, pixel, 0).xyz;\n  var pixelLeft : vec3<f32> = textureLoad(normalTexture, pixel - offset.xz, 0).xyz;\n  var pixelRight : vec3<f32> = textureLoad(normalTexture, pixel + offset.xz, 0).xyz;\n  var pixelUp : vec3<f32> = textureLoad(normalTexture, pixel + offset.zy, 0).xyz;\n  var pixelDown : vec3<f32> = textureLoad(normalTexture, pixel - offset.zy, 0).xyz;\n  var edge : vec3<f32> = (\n    abs(pixelLeft    - pixelCenter)\n    + abs(pixelRight - pixelCenter) \n    + abs(pixelUp    - pixelCenter) \n    + abs(pixelDown  - pixelCenter)\n  );\n  return (edge.x + edge.y + edge.z) * effects.edges.normalScale;\n}\n\n@fragment\nfn main(@builtin(position) uv : vec4<f32>) -> @location(0) vec4<f32> {\n  var pixel : vec2<i32> = vec2<i32>(floor(uv.xy));\n  var color : vec3<f32> = textureLoad(colorTexture, pixel, 0).xyz;\n  if (effects.edges.intensity != 0) {\n    color = mix(color, effects.edges.color, clamp(max(edgesDepth(pixel), edgesNormal(pixel)), 0, 1) * effects.edges.intensity);\n  }\n  return vec4<f32>(color, 1);\n}\n"}),entryPoint:"main",targets:[{format:n}]},primitive:{topology:"triangle-list"}})}bindTextures({color:e,normal:n,position:t}){const{device:r,effects:o,pipeline:i}=this;this.bindings=r.createBindGroup({layout:i.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:o.buffer}},{binding:1,resource:e},{binding:2,resource:n},{binding:3,resource:t}]})}render(e,n){const{bindings:t,descriptor:r,geometry:o,pipeline:i}=this;r.colorAttachments[0].view=n;const a=e.beginRenderPass(r);a.setPipeline(i),a.setBindGroup(0,t),a.setVertexBuffer(0,o),a.draw(6,1,0,0),a.end()}}const x=`\nstruct VertexInput {\n  @location(0) position : vec3<f32>,\n  @location(1) uv : vec2<f32>,\n  @location(2) face : vec4<f32>,\n}\n\nstruct VertexOutput {\n  @builtin(position) position : vec4<f32>,\n  @location(0) viewPosition: vec3<f32>,\n  @location(1) normal: vec3<f32>,\n  @location(2) uv: vec2<f32>,\n  @location(3) @interpolate(flat) texture: i32,\n}\n\nstruct Camera {\n  projection : mat4x4<f32>,\n  view : mat4x4<f32>,\n  normal : mat3x3<f32>,\n}\n\n@group(0) @binding(0) var<uniform> camera : Camera;\n\n${v}\n\nconst faceNormal : vec3<f32> = vec3<f32>(0, 0, 1);\n\n@vertex\nfn main(voxel : VertexInput) -> VertexOutput {\n  var rotation : mat3x3<f32>;\n  switch (i32(voxel.face.w % 6)) {\n    default {\n      rotation = mat3x3<f32>(\n        1, 0, 0,\n        0, 1, 0,\n        0, 0, 1,\n      );\n    }\n    case 1 {\n      rotation = rotateX(PI * -0.5);\n    }\n    case 2 {\n      rotation = rotateX(PI * 0.5);\n    }\n    case 3 {\n      rotation = rotateY(PI * -0.5);\n    }\n    case 4 {\n      rotation = rotateY(PI * 0.5);\n    }\n    case 5 {\n      rotation = rotateY(PI);\n    }\n  }\n  var mvPosition : vec4<f32> = camera.view * vec4<f32>(rotation * voxel.position + voxel.face.xyz, 1);\n  var out : VertexOutput;\n  out.position = camera.projection * mvPosition;\n  out.viewPosition = -mvPosition.xyz;\n  out.normal = normalize(camera.normal * rotation * faceNormal);\n  out.uv = voxel.uv;\n  out.texture = i32(floor(voxel.face.w / 6));\n  return out;\n}\n`,g=e=>{const n=e.createBuffer({size:30*Float32Array.BYTES_PER_ELEMENT,usage:GPUBufferUsage.VERTEX,mappedAtCreation:!0});return new Float32Array(n.getMappedRange()).set([-.5,-.5,.5,0,1,.5,-.5,.5,1,1,.5,.5,.5,1,0,.5,.5,.5,1,0,-.5,.5,.5,0,0,-.5,-.5,.5,0,1]),n.unmap(),n};class m{constructor({adapter:e,device:n,atlas:t=null,camera:r=null,canvas:o=null,samples:i=4}){const a=navigator.gpu.getPreferredCanvasFormat(e);this.atlas=t||new f({device:n}),this.camera=r||new d({device:n}),this.canvas=o||document.createElement("canvas"),this.canvas.width=window.innerWidth,this.canvas.height=window.innerHeight,this.context=this.canvas.getContext("webgpu"),this.context.configure({alphaMode:"opaque",device:n,format:a}),this.device=n,this.samples=i;const s=n.createRenderPipeline({layout:"auto",vertex:{module:n.createShaderModule({code:x}),entryPoint:"main",buffers:[{arrayStride:5*Float32Array.BYTES_PER_ELEMENT,attributes:[{shaderLocation:0,offset:0,format:"float32x3"},{shaderLocation:1,offset:3*Float32Array.BYTES_PER_ELEMENT,format:"float32x2"}]},{arrayStride:4*Float32Array.BYTES_PER_ELEMENT,stepMode:"instance",attributes:[{shaderLocation:2,offset:0,format:"float32x4"}]}]},fragment:{module:n.createShaderModule({code:"\nstruct FragmentInput {\n  @location(0) position : vec3<f32>,\n  @location(1) normal : vec3<f32>,\n  @location(2) uv : vec2<f32>,\n  @location(3) @interpolate(flat) texture : i32,\n}\n\nstruct FragmentOutput {\n  @location(0) color : vec4<f32>,\n  @location(1) normal : vec4<f32>,\n  @location(2) position : vec4<f32>,\n}\n\n@group(0) @binding(1) var atlas : texture_2d_array<f32>;\n@group(0) @binding(2) var atlasSampler : sampler;\n\n@fragment\nfn main(face : FragmentInput) -> FragmentOutput {\n  var output : FragmentOutput;\n  output.color = textureSample(atlas, atlasSampler, face.uv, face.texture);\n  output.normal = vec4<f32>(normalize(face.normal), 1);\n  output.position = vec4<f32>(face.position, 1);\n  return output;\n}\n"}),entryPoint:"main",targets:[{format:"rgba8unorm"},{format:"rgba16float"},{format:"rgba16float"}]},primitive:{topology:"triangle-list",cullMode:"back"},depthStencil:{depthWriteEnabled:!0,depthCompare:"less",format:"depth24plus"},multisample:{count:this.samples}});this.rendering={bindings:n.createBindGroup({layout:s.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:this.camera.buffer}},{binding:1,resource:this.atlas.texture.createView()},{binding:2,resource:n.createSampler()}]}),descriptor:{colorAttachments:[{clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store"},{clearValue:{r:0,g:0,b:0,a:0},loadOp:"clear",storeOp:"store"},{clearValue:{r:0,g:0,b:0,a:0},loadOp:"clear",storeOp:"store"}],depthStencilAttachment:{depthClearValue:1,depthLoadOp:"clear",depthStoreOp:"store"}},geometry:g(n),pipeline:s},this.postprocessing=new h({device:n,format:a})}render(e,n){const{context:t,postprocessing:r,rendering:{bindings:o,descriptor:i,geometry:a,pipeline:s}}=this,c=e.beginRenderPass(i);c.setPipeline(s),c.setBindGroup(0,o),c.setVertexBuffer(0,a),n.chunks.forEach((({faces:e})=>{c.setVertexBuffer(1,e,16),c.drawIndirect(e,0)})),c.end(),r.render(e,t.getCurrentTexture().createView())}setClearColor(e,n,t){const{rendering:{descriptor:{colorAttachments:[{clearValue:r}]}}}=this;r.r=e,r.g=n,r.b=t}setSize(e,n){const{camera:t,canvas:r,device:o,postprocessing:i,rendering:a,samples:s}=this,c=window.devicePixelRatio||1,u=[Math.floor(e*c),Math.floor(n*c)];r.width=u[0],r.height=u[1],r.style.width=`${e}px`,r.style.height=`${n}px`,t.aspect=e/n,t.updateProjection();const f=(e,n,t,r)=>(e[n]&&e[n].destroy(),e[n]=o.createTexture({size:u,sampleCount:t,format:r,usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING}),e[n].createView());a.descriptor.colorAttachments[0].view=f(a,"colorTexture",s,"rgba8unorm"),a.descriptor.colorAttachments[0].resolveTarget=f(a,"colorTarget",1,"rgba8unorm"),a.descriptor.colorAttachments[1].view=f(a,"normalTexture",s,"rgba16float"),a.descriptor.colorAttachments[1].resolveTarget=f(a,"normalTarget",1,"rgba16float"),a.descriptor.colorAttachments[2].view=f(a,"positionTexture",s,"rgba16float"),a.descriptor.colorAttachments[2].resolveTarget=f(a,"positionTarget",1,"rgba16float"),a.descriptor.depthStencilAttachment.view=f(a,"depthTexture",s,"depth24plus"),i.bindTextures({color:a.colorTarget.createView(),normal:a.normalTarget.createView(),position:a.positionTarget.createView()})}}const y=a(0,0,0),b=(e,n,t,r)=>{const o=.25*n,i=.7*r.width;var a,c,u;a=t.camera.position,c=t.camera.target,u=s(y,Math.sin(o)*i,0,Math.cos(o)*i),a[0]=c[0]+u[0],a[1]=c[1]+u[1],a[2]=c[2]+u[2],t.camera.updateView()};var z=[{onAnimation:b,onLoad:e=>e.setClearColor(.7,.6,.2),source:"\n  fn distanceToScene(pos : vec3<f32>) -> f32 {\n    var origin : vec3<f32> = pos - volume.center;\n    var size : f32 = volume.size.x * 0.3;\n    var t : f32 = sin(time);\n    return opSmoothUnion(\n      sdSphere(origin - vec3<f32>(size * (0.6 * t * -1), 0, 0), size),\n      sdSphere(origin - vec3<f32>(size * (0.6 * t), 0, 0), size),\n      6\n    );\n  }\n  fn getValueAt(pos : vec3<f32>) -> f32 {\n    if (distanceToScene(pos) > 0.01) {\n      return 0;\n    }\n    return 1 + abs(simplexNoise3(pos * 0.01)) * 254.0;\n  }\n  "},{onAnimation:b,onLoad:e=>e.setClearColor(.1,.3,.6),source:"\n  fn distanceToScene(pos : vec3<f32>) -> f32 {\n    var origin : vec3<f32> = pos - volume.center;\n    var r : mat3x3<f32> = rotateX(PI * -0.5);\n    return opUnion(\n      sdTorus(\n        r * origin,\n        vec2<f32>(volume.size.x * 0.3, volume.size.x * 0.1)\n      ),\n      sdTorus(\n        r * rotateY(time) * origin,\n        vec2<f32>(volume.size.x * 0.1, volume.size.x * (0.02 + sin(time * 10) * 0.01))\n      )\n    );\n  }\n  fn getValueAt(pos : vec3<f32>) -> f32 {\n    if (distanceToScene(pos) > 0.01) {\n      return 0;\n    }\n    return 1 + abs(simplexNoise3(pos * 0.01)) * 254.0;\n  }\n  "},{onAnimation:b,onLoad:e=>e.setClearColor(.1,.2,.4),source:"\n  fn getValueAt(pos : vec3<f32>) -> f32 {\n    var p : vec3<f32> = pos + vec3<f32>(0, 0, time * 100);\n    var h : f32 = abs(simplexNoise3(p * 0.01)) * volume.size.y;\n    if (pos.y > h) {\n      return 0;\n    }\n    return 1 + abs(simplexNoise3(p * -0.001)) * 254.0;\n  }\n  "},{onAnimation:b,onLoad:e=>e.setClearColor(.1,.1,.1),source:"\n  fn distanceToScene(pos : vec3<f32>) -> f32 {\n    if (sdSphere(pos - volume.center, volume.size.x * 0.35) > 0.01) {\n      return 1;\n    }\n    var id : f32 = noise3(floor(pos / 32));\n    var p : vec3<f32> = (pos % 32) - 16;\n    var t : f32 = sin((time + id) * 4);\n    var d : f32;\n    if (floor(id * 10) % 2 == 0) {\n      d = sdSphere(p, t * 4 + 8);\n    } else {\n      d = sdBox(p, vec3<f32>(t * 4 + 8));\n    }\n    return opSmoothSubstraction(\n      opSmoothSubstraction(\n        d,\n        sdBox(p, vec3<f32>(4, 4, 12)),\n        1\n      ),\n      sdBox(p, vec3<f32>(12, 4, 4)),\n      1\n    );\n  }\n  fn getValueAt(pos : vec3<f32>) -> f32 {\n    if (distanceToScene(pos) > 0.01) {\n      return 0;\n    }\n    return 1 + abs(simplexNoise3(floor(pos / 32))) * 254.0;\n  }\n  "}],w=({chunkSize:e})=>`\nconst chunkSize : i32 = ${e};\n\nfn getVoxel(pos : vec3<i32>) -> u32 {\n  return u32(pos.z * chunkSize * chunkSize + pos.y * chunkSize + pos.x);\n}\n`;const S=({chunkSize:e})=>`\nstruct Faces {\n  vertexCount : u32,\n  instanceCount : atomic<u32>,\n  firstVertex : u32,\n  firstInstance : u32,\n  data : array<f32>,\n}\n\n@group(0) @binding(0) var<uniform> chunk : vec3<i32>;\n@group(0) @binding(1) var<storage, read_write> faces : Faces;\n@group(0) @binding(2) var<storage, read> voxels : array<f32>;\n@group(0) @binding(3) var<storage, read> voxels_north : array<f32>;\n@group(0) @binding(4) var<storage, read> voxels_top : array<f32>;\n@group(0) @binding(5) var<storage, read> voxels_bottom : array<f32>;\n@group(0) @binding(6) var<storage, read> voxels_west : array<f32>;\n@group(0) @binding(7) var<storage, read> voxels_east : array<f32>;\n@group(0) @binding(8) var<storage, read> voxels_south : array<f32>;\n\n${w({chunkSize:e})}\n\nfn isAir(pos : vec3<i32>) -> bool {\n  if (pos.x == -1) {\n    return voxels_west[getVoxel(vec3<i32>(chunkSize - 1, pos.y, pos.z))] == 0;\n  }\n  if (pos.x == chunkSize) {\n    return voxels_east[getVoxel(vec3<i32>(0, pos.y, pos.z))] == 0.0;\n  }\n  if (pos.y == -1) {\n    return voxels_bottom[getVoxel(vec3<i32>(pos.x, chunkSize - 1, pos.z))] == 0;\n  }\n  if (pos.y == chunkSize) {\n    return voxels_top[getVoxel(vec3<i32>(pos.x, 0, pos.z))] == 0;\n  }\n  if (pos.z == -1) {\n    return voxels_south[getVoxel(vec3<i32>(pos.x, pos.y, chunkSize - 1))] == 0;\n  }\n  if (pos.z == chunkSize) {\n    return voxels_north[getVoxel(vec3<i32>(pos.x, pos.y, 0))] == 0;\n  }\n  return voxels[getVoxel(pos)] == 0; \n}\n\nfn pushFace(pos : vec3<i32>, face : i32, texture : i32) {\n  var offset : u32 = atomicAdd(&(faces.instanceCount), 1) * 4;\n  faces.data[offset] = f32(pos.x) + 0.5;\n  faces.data[offset + 1] = f32(pos.y) + 0.5;\n  faces.data[offset + 2] = f32(pos.z) + 0.5;\n  faces.data[offset + 3] = f32(texture * 6 + face);\n}\n\nconst faceNormals = array<vec3<i32>, 6>(\n  vec3<i32>(0, 0, 1),\n  vec3<i32>(0, 1, 0),\n  vec3<i32>(0, -1, 0),\n  vec3<i32>(-1, 0, 0),\n  vec3<i32>(1, 0, 0),\n  vec3<i32>(0, 0, -1),\n);\n\n@compute @workgroup_size(4, 4, 4)\nfn main(@builtin(global_invocation_id) GlobalInvocationID : vec3<u32>) {\n  var pos : vec3<i32> = vec3<i32>(GlobalInvocationID.xyz);\n  if (\n    pos.x >= chunkSize || pos.y >= chunkSize || pos.z >= chunkSize\n  ) {\n    return;\n  }\n  var value : f32 = voxels[getVoxel(pos)];\n  if (value != 0) {\n    var texture : i32 = i32(floor(value) - 1);\n    for (var face : i32 = 0; face < 6; face++) {\n      var npos : vec3<i32> = pos + faceNormals[face];\n      if (isAir(npos)) {\n        pushFace(chunk + pos, face, texture);\n      }\n    }\n  }\n}\n`;class E{constructor({chunks:e,volume:n}){this.pipeline=n.device.createComputePipeline({layout:"auto",compute:{module:n.device.createShaderModule({code:S({chunkSize:n.chunkSize})}),entryPoint:"main"}});const t={x:0,y:0,z:0},r=(r,o)=>{if(t.x=r.x+o.x,t.y=r.y+o.y,t.z=r.z+o.z,t.x<0||t.x>=e.x||t.y<0||t.y>=e.y||t.z<0||t.z>=e.z)return n.edge;const i=t.z*e.x*e.y+t.y*e.x+t.x;return n.chunks[i].voxels},o=[{x:0,y:0,z:1},{x:0,y:1,z:0},{x:0,y:-1,z:0},{x:-1,y:0,z:0},{x:1,y:0,z:0},{x:0,y:0,z:-1}];this.bindings=n.chunks.map((e=>({bindings:n.device.createBindGroup({layout:this.pipeline.getBindGroupLayout(0),entries:[e.position,e.faces,e.voxels,...o.map((n=>r(e.chunk,n)))].map(((e,n)=>({binding:n,resource:{buffer:e}})))}),chunk:e}))),this.workgroups=Math.ceil(n.chunkSize/4)}compute(e){const{bindings:n,pipeline:t,workgroups:r}=this;n.forEach((({bindings:n,chunk:o})=>{o.resetInstanceCount(e);const i=e.beginComputePass();i.setPipeline(t),i.setBindGroup(0,n),i.dispatchWorkgroups(r,r,r),i.end()}))}}const T=({chunkSize:e,width:n,height:t,depth:r,scene:o})=>`\n@group(0) @binding(0) var<uniform> time : f32;\n@group(0) @binding(1) var<uniform> chunk : vec3<i32>;\n@group(0) @binding(2) var<storage, read_write> voxels : array<f32>;\n\n${c}\n${v}\nfn sdBox(p : vec3<f32>, r : vec3<f32>) -> f32 {\n  var q : vec3<f32> = abs(p) - r;\n  return length(max(q, vec3<f32>(0))) + min(max(q.x, max(q.y, q.z)), 0);\n}\n\nfn sdCapsule(p : vec3<f32>, r : vec3<f32>) -> f32 {\n  var q : vec3<f32> = vec3<f32>(p.x, clamp(p.y, -r.y + r.x, r.y - r.x), p.y);\n  return length(q) - q.x;\n}\n\nfn sdEllipsoid(p : vec3<f32>, r : vec3<f32>) -> f32 {\n  var k0 : f32 = length(p / r);\n  var k1 : f32 = length(p / (r * r));\n  return k0 * (k0 - 1.0) / k1;\n}\n\nfn sdSphere(p : vec3<f32>, r : f32) -> f32 {\n  return length(p) - r;\n}\n\nfn sdTorus(p : vec3<f32>, r : vec2<f32>) -> f32 {\n  var q : vec2<f32> = vec2<f32>(length(p.xz) - r.x, p.y);\n  return length(q) - r.y;\n}\n\nfn opUnion(d1 : f32, d2 : f32) -> f32 {\n  return min(d1, d2);\n}\n\nfn opSubstraction(d1 : f32, d2 : f32) -> f32 {\n  return max(d1, -d2);\n}\n\nfn opSmoothUnion(d1 : f32, d2 : f32, k : f32) -> f32 {\n  var h : f32 = clamp(0.5 + 0.5 * (d2 - d1) / k, 0, 1);\n  return mix(d2, d1, h) + k * h * (1 - h);\n}\n\nfn opSmoothSubstraction(d1 : f32, d2 : f32, k : f32) -> f32 {\n  var h : f32 = clamp(0.5 - 0.5 * (d2 + d1) / k, 0, 1);\n  return mix(d1, -d2, h) + k * h * (1 - h);\n}\n\n${w({chunkSize:e})}\n\nstruct Volume {\n  center : vec3<f32>,\n  size : vec3<f32>,\n}\n\nconst volume : Volume = Volume(\n  vec3<f32>(${.5*n}, ${.5*t}, ${.5*r}),\n  vec3<f32>(${n}, ${t}, ${r})\n);\n\n${o}\n\n@compute @workgroup_size(4, 4, 4)\nfn main(@builtin(global_invocation_id) GlobalInvocationID : vec3<u32>) {\n  var pos : vec3<i32> = vec3<i32>(GlobalInvocationID.xyz);\n  if (\n    pos.x >= chunkSize || pos.y >= chunkSize || pos.z >= chunkSize\n  ) {\n    return;\n  }\n  voxels[getVoxel(pos)] = getValueAt(vec3<f32>(chunk + pos));\n}\n`;class k{constructor({scene:e,volume:n}){this.pipeline=n.device.createComputePipeline({layout:"auto",compute:{module:n.device.createShaderModule({code:T({chunkSize:n.chunkSize,width:n.width,height:n.height,depth:n.depth,scene:e})}),entryPoint:"main"}}),this.bindings=n.chunks.map((({position:e,voxels:t})=>n.device.createBindGroup({layout:this.pipeline.getBindGroupLayout(0),entries:[n.time.buffer,e,t].map(((e,n)=>({binding:n,resource:{buffer:e}})))}))),this.workgroups=Math.ceil(n.chunkSize/4)}compute(e){const{bindings:n,pipeline:t,workgroups:r}=this;n.forEach((n=>{const o=e.beginComputePass();o.setPipeline(t),o.setBindGroup(0,n),o.dispatchWorkgroups(r,r,r),o.end()}))}}class B{constructor({device:e,chunk:n,chunkSize:t}){this.chunk=n,this.faces=e.createBuffer({mappedAtCreation:!0,size:4*Uint32Array.BYTES_PER_ELEMENT+6*Math.ceil(t*t*t*.5)*4*Float32Array.BYTES_PER_ELEMENT,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.INDIRECT|GPUBufferUsage.STORAGE|GPUBufferUsage.VERTEX}),new Uint32Array(this.faces.getMappedRange())[0]=6,this.faces.unmap(),this.position=e.createBuffer({mappedAtCreation:!0,size:3*Int32Array.BYTES_PER_ELEMENT,usage:GPUBufferUsage.UNIFORM}),new Int32Array(this.position.getMappedRange()).set([n.x*t,n.y*t,n.z*t]),this.position.unmap(),this.voxels=B.createVoxelsBuffer({device:e,chunkSize:t})}destroy(){const{faces:e,position:n,voxels:t}=this;e.destroy(),n.destroy(),t.destroy()}resetInstanceCount(e){const{faces:n}=this;e.clearBuffer(n,4,4)}static createVoxelsBuffer({device:e,chunkSize:n}){return e.createBuffer({size:n*n*n*Float32Array.BYTES_PER_ELEMENT,usage:GPUBufferUsage.STORAGE})}}class P{constructor({device:e}){this.device=e,this.data=new Float32Array(1),this.buffer=e.createBuffer({size:this.data.byteLength,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM})}destroy(){const{buffer:e}=this;e.destroy()}set(e){const{device:n,buffer:t,data:r}=this;r[0]=e,n.queue.writeBuffer(t,0,r)}}class A{constructor({chunkSize:e=100,device:n,width:t,height:r,depth:o}){this.chunkSize=e,this.device=n,this.width=t,this.height=r,this.depth=o;const i={x:Math.ceil(t/e),y:Math.ceil(r/e),z:Math.ceil(o/e)};this.chunks=[];for(let t=0;t<i.z;t++)for(let r=0;r<i.y;r++)for(let o=0;o<i.x;o++)this.chunks.push(new B({device:n,chunk:{x:o,y:r,z:t},chunkSize:e}));this.edge=B.createVoxelsBuffer({device:n,chunkSize:e}),this.mesher=new E({chunks:i,volume:this}),this.time=new P({device:n})}compute(e,n){const{mesher:t,time:r,voxelizer:o}=this;r.set(n),o.compute(e),t.compute(e)}destroy(){const{chunks:e,edge:n,time:t}=this;e.forEach((e=>e.destroy())),n.destroy(),t.destroy()}setScene(e){this.voxelizer=new k({scene:e,volume:this})}}(async()=>{if(!navigator.gpu||!navigator.gpu.getPreferredCanvasFormat)throw new Error("WebGPU");const e=await navigator.gpu.requestAdapter(),n=await e.requestDevice(),t=new m({adapter:e,device:n});document.getElementById("renderer").appendChild(t.canvas),t.setSize(window.innerWidth,window.innerHeight),window.addEventListener("resize",(()=>t.setSize(window.innerWidth,window.innerHeight)),!1);const r=new A({device:n,width:300,height:300,depth:300});s(t.camera.target,.5*r.width,.5*r.height,.5*r.depth);let o,i,a,c=performance.now()/1e3;const u=document.getElementById("source"),f=e=>{o=z[e],i=e,a=-1;let n=o.source;n.includes("fn distanceToScene(pos : vec3<f32>) -> f32")&&(n=n.slice(0,n.indexOf("fn getValueAt(pos : vec3<f32>) -> u32"))),u.innerText=n,t.atlas.compute(o.atlas),r.setScene(o.source),o.onLoad&&o.onLoad(t,r)};f(0),setInterval((()=>f((i+1)%z.length)),1e4);const l=()=>{requestAnimationFrame(l);const e=performance.now()/1e3,i=e-c;c=e,o.onAnimation&&o.onAnimation(i,e,t,r);const s=n.createCommandEncoder();(void 0===o.maxFPS||o.maxFPS>0&&a<=e-1/o.maxFPS||-1===a)&&(a=e,r.compute(s,e)),t.render(s,r),n.queue.submit([s.finish()])};requestAnimationFrame(l)})().catch((e=>{console.error(e),document.getElementById("canary").classList.add("enabled")})).finally((()=>document.getElementById("loading").classList.remove("enabled")))}();
